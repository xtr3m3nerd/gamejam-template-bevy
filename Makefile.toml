env_files = [ './butler.env' ]

[env]
PROJECT_NAME = '{{project-name}}'
LINUX_TARGET = 'x86_64-unknown-linux-gnu'
WINDOWS_TARGET = 'x86_64-pc-windows-gnu'
#WINDOWS_TARGET = 'x86_64-pc-windows-msvc'
ENV_DIR = {source='${CARGO_MAKE_PROFILE}', default_value = 'release', mapping = {release = 'release'}}
CARGO_TARGET_DIR = {value = 'target', condition = {env_not_set = ['CARGO_TARGET_DIR']}}
CARGO_WASM_PATH = '${CARGO_TARGET_DIR}/wasm32-unknown-unknown/${ENV_DIR}/${CARGO_MAKE_CRATE_NAME}.wasm'

[env.release]
CARGO_RELEASE_ARGS = '--release'

[tasks.show-env]
command = 'env'


####################################
# Native tasks
####################################

[tasks.build-native]
command = 'cargo'
args = ['build', '--features', 'native', '@@split(CARGO_RELEASE_ARGS, )']

[tasks.run]
command = '${CARGO_TARGET_DIR}/${ENV_DIR}/${CARGO_MAKE_BINARY_EXECUTABLE_NAME}'
dependencies = ['build-native']

[tasks.serve]
env = { 'PLATFORM' = 'web' }
command = 'basic-http-server'
args = ['-x', 'release/${PLATFORM}/']
dependencies = ['distribute-web', 'install-basic-http-server']

[tasks.test]
disabled = true


####################################
# Group Tasks
####################################

[tasks.zip]
description = ''
dependencies = ['zip-web', 'zip-linux', 'zip-windows']

[tasks.publish]
description = 'Publishes all builds of the game on Itch.io using Butler'
clear = true
condition = { env_set = ['BUTLER_EXE'] }
dependencies = ['publish-web', 'publish-linux', 'publish-windows']


####################################
# Release Directory
####################################

[tasks.prepare-release-dir]
script_runner = '@duckscript'
script = '''
rm -r release
mkdir release/web
mkdir release/windows
mkdir release/linux
mkdir release/android
mkdir release/ios
'''

[tasks.collect-assets]
condition = { env_set = ['PLATFORM'] }
script_runner = '@duckscript'
script = '''
# assets = array
# for extention in ${extension}
#     files = glob_array {{project-name}}/assets/**/*.${extention}
#     assets = array_concat ${assets} ${files}
# end
# for path in ${assets}
#     cp ${path} release/${PLATFORM}/${path}
# end
# TODO - use extensions instead
cp -r {{project-name}}/assets release/${PLATFORM}/assets
'''

[tasks.zip-platform]
condition = { env_set = ['PLATFORM'] }
# TODO: Use something more lightweight here to zip the files
script_runner = '@rust'
script = '''
//! ```cargo
//! [dependencies]
//! zip = "0.5"
//! walkdir = "2.3"
//! envmnt = "0.9"
//! ```
use std::io::prelude::*;
use std::io::{ Seek, Write };
use walkdir::{ DirEntry, WalkDir };
use std::path::{ Path, PathBuf };
use zip::write::FileOptions;
use std::fs::File;
fn main() {
    let platform = envmnt::get_or_panic("PLATFORM");
    let project_name = envmnt::get_or_panic("PROJECT_NAME");
    let src_dir = format!("release/{}", platform);
    println!("Package src dir: {:?}", &src_dir);
    let out_path = PathBuf::from(format!("release/{}-{}.zip", project_name, platform));
    let out_file = File::create(&out_path).unwrap();
    let walkdir = WalkDir::new(&src_dir);
    let iter = walkdir.into_iter();
    zip_dir(&mut iter.filter_map(|e| e.ok()), &src_dir, out_file, zip::CompressionMethod::Deflated).unwrap();
}
fn zip_dir<T>(
    it: &mut dyn Iterator<Item = DirEntry>,
    prefix: &str,
    writer: T,
    method: zip::CompressionMethod,
) -> zip::result::ZipResult<()>
where
    T: Write + Seek,
{
    let mut zip = zip::ZipWriter::new(writer);
    let options = FileOptions::default()
        .compression_method(method)
        .unix_permissions(0o755);
    let mut buffer = Vec::new();
    for entry in it {
        let path = entry.path();
        let name = path.strip_prefix(Path::new(prefix)).unwrap();
        // Write file or directory explicitly
        // Some unzip tools unzip files with directory paths correctly, some do not!
        if path.is_file() {
            println!("Adding file {:?} as {:?} ...", path, name);
            #[allow(deprecated)]
            zip.start_file_from_path(name, options)?;
            let mut f = File::open(path)?;
            f.read_to_end(&mut buffer)?;
            zip.write_all(&*buffer)?;
            buffer.clear();
        } else if name.as_os_str().len() != 0 {
            // Only if not root! Avoids path spec / warning
            // and mapname conversion failed error on unzip
            println!("Adding dir {:?} as {:?} ...", path, name);
            #[allow(deprecated)]
            zip.add_directory_from_path(name, options)?;
        }
    }
    zip.finish()?;
    Result::Ok(())
}
'''


####################################
# Build Web
####################################

[tasks.install-basic-http-server]
install_crate = {crate_name = 'basic-http-server', binary = 'basic-http-server', test_arg='--help'}

[tasks.install-wasm-bindgen-cli]
install_crate = {crate_name = 'wasm-bindgen-cli', binary = 'wasm-bindgen', test_arg='--help'}

[tasks.install-target-web]
command = 'rustup'
args = ['target', 'install', 'wasm32-unknown-unknown']

[tasks.build-web-wasm32]
command = 'cargo'
args = ['build', '--target', 'wasm32-unknown-unknown', '--features', 'web', '@@split(CARGO_RELEASE_ARGS, )']
dependencies = ['install-target-web']

[tasks.build-web-bindgen]
args = ['--out-dir', '${CARGO_TARGET_DIR}', '--out-name', 'wasm', '--target', 'web', '--no-typescript', '${CARGO_WASM_PATH}']
command = 'wasm-bindgen'
dependencies = ['install-wasm-bindgen-cli', 'build-web-wasm32']

[tasks.build-web]
install_crate = {crate_name = 'wasm-pack', binary = 'wasm-pack', test_arg='--help'}
command = 'wasm-pack'
args = ['build', '--target', 'web']
dependencies = ['install-target-web']

[tasks.collect-assets-web]
env = { 'PLATFORM' = 'web' }
run_task = 'collect-assets'

[tasks.distrib-web]
env = { 'PLATFORM' = 'web' }
dependencies = ['prepare-release-dir', 'build-web', 'collect-assets-web']
script_runner = '@duckscript'
script = '''
cp pkg/${PROJECT_NAME}_bg.wasm release/${PLATFORM}/${PROJECT_NAME}.wasm
cp pkg/${PROJECT_NAME}.js release/${PLATFORM}/${PROJECT_NAME}.js
wasm_file_size = filesize release/${PLATFORM}/${PROJECT_NAME}.wasm
index_html = readfile web/index.html
index_html = replace ${index_html} "<!<!PROJECT_NAME!>!>" ${PROJECT_NAME}
index_html = replace ${index_html} "<!<!WASM_FILE_SIZE!>!>" ${wasm_file_size}
writefile release/${PLATFORM}/index.html ${index_html}
cp web/favicon.ico release/${PLATFORM}/favicon.ico
'''
# Saved this to be able to have a loading screen, might not be necessary with changes to index.html
# sed -i 's/async function init(input/async function init(input, onload_callback/g' wasm/target/wasm_game.js
# sed -i 's/return finalizeInit(instance, module)/if(typeof onload_callback === "function") { onload_callback(); }\nreturn finalizeInit(instance, module)/g' wasm/target/wasm_game.js

[tasks.zip-web]
env = { 'PLATFORM' = 'web' }
dependencies = ['distrib-web']
run_task = 'zip-platform'

[tasks.publish-web]
env = { 'PLATFORM' = 'web' }
dependencies = ['distrib-web']
condition = { env_set = ['BUTLER_EXE'] }
script_runner = '@duckscript'
script = '''
exec ${BUTLER_EXE} push release/web ${ITCH_USER}/${ITCH_GAME}:web
'''


####################################
# Build Windows
####################################

[tasks.install-target-windows]
command = 'rustup'
args = ['target', 'install', '${WINDOWS_TARGET]']

[tasks.toolchain-install-windows]
condition = { platforms = ["linux"] }
command = 'rustup'
args = ['toolchain', 'install', 'stable-x86_64-pc-windows-gnu']
# Requirement Install mingw32
# install MINGW environment
# pacman -S cross-x86_64-w64-mingw32

# MSVC
# rustup target add x86_64-pc-windows-msvc
# cargo install xwin
# xwin --accept-license 1 splat --output /opt/xwin

# cargo build --target=x86_64-pc-windows-msvc --release

# [target.x86_64-pc-windows-msvc]
# linker = "lld"
# rustflags = [
#   "-Lnative=/opt/xwin/crt/lib/x86_64",
#   "-Lnative=/opt/xwin/sdk/lib/um/x86_64",
#   "-Lnative=/opt/xwin/sdk/lib/ucrt/x86_64"
# ]

[tasks.build-windows]
dependencies = ['install-target-windows', 'toolchain-install-windows']
command = 'cargo'
args = ['build', '--target', '${WINDOWS_TARGET}', '@@split(CARGO_RELEASE_ARGS, )']

[tasks.collect-assets-windows]
env = { 'PLATFORM' = 'windows' }
run_task = 'collect-assets'

[tasks.distrib-windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['prepare-release-dir', 'build-windows', 'collect-assets-windows']
script_runner = '@duckscript'
script = '''
cp target/${WINDOWS_TARGET}/release/${PROJECT_NAME}-desktop.exe release/${PLATFORM}/${PROJECT_NAME}-desktop.exe
'''

[tasks.zip-windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['distrib-windows']
run_task = 'zip-platform'

[tasks.publish-windows]
env = { 'PLATFORM' = 'windows' }
dependencies = ['distrib-windows']
condition = { env_set = ['BUTLER_EXE'] }
script_runner = '@duckscript'
script = '''
exec ${BUTLER_EXE} push release/windows ${ITCH_USER}/${ITCH_GAME}:windows
'''


####################################
# Build Linux
####################################

[tasks.install-target-linux]
command = 'rustup'
args = ['target', 'install', '${LINUX_TARGET]']

[tasks.build-linux]
command = 'cargo'
args = ['build', '--target', '${LINUX_TARGET}', '@@split(CARGO_RELEASE_ARGS, )']

[tasks.collect-assets-linux]
env = { 'PLATFORM' = 'linux' }
run_task = 'collect-assets'

[tasks.distrib-linux]
env = { 'PLATFORM' = 'linux' }
dependencies = ['prepare-release-dir', 'build-linux', 'collect-assets-linux']
script_runner = '@duckscript'
script = '''
cp target/${LINUX_TARGET}/release/${PROJECT_NAME}-desktop release/${PLATFORM}/${PROJECT_NAME}-desktop
'''

[tasks.zip-linux]
env = { 'PLATFORM' = 'linux' }
dependencies = ['distrib-linux']
run_task = 'zip-platform'

[tasks.publish-linux]
env = { 'PLATFORM' = 'linux' }
dependencies = ['distrib-linux']
condition = { env_set = ['BUTLER_EXE'] }
script_runner = '@duckscript'
script = '''
exec ${BUTLER_EXE} push release/linux ${ITCH_USER}/${ITCH_GAME}:linux
'''

####################################
# Platform setup
####################################

[tasks.install-target-android]
command = 'rustup'
args = ['target', 'install', 'aarch64-linux-android', 'armv7-linux-androideabi']

[tasks.install-cargo-apk]
dependencies = ['install-target-android']
command = 'cargo'
args = ['install', 'cargo-apk']

[tasks.setup-android]
description = 'Setup build for android'
dependencies = ['install-cargo-apk']

[tasks.setup-ios]
description = 'Setup build for ios'
command = 'rustup'
args = ['target', 'install', 'aarch64-apple-ios', 'x86_64-apple-ios', 'aarch64-apple-ios-sim']


